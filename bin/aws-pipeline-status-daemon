#!/bin/bash
# env variables to see: pipe delimited list of service names as $services
# the $profile you want to use
basepath=/tmp/aws-pipeline-status
lockpath=$basepath/aws-pipe-status-daemon.lock
mfapipe="$basepath/mfa-pipe"
defaultconfig="$HOME/.config/aws-pipeline/services.json"
# Make sure we remove lockfile no matter how we exit
trap "rm -rf $basepath" EXIT

# Create lockfile or exit if fail
if [ -f "$lockpath" ]; then
  echo "Aws Statusline Daemon Already Running...Exiting..."
  exit 1;
fi

if [ ! -d $basepath ]; then
  mkdir $basepath
  chmod 777 $basepath
fi
if [ ! -d $basepath/services ]; then
  mkdir $basepath/services
  chmod 777 $basepath/services
fi

touch $lockpath || exit 1
echo $$BASHPID > $lockpath

if [ -f "$1" ]; then
  config="$1"
elif [ -f "$AWS-PIPELINE-CONFIG" ];
  config="$AWS-PIPELINE-CONFIG"
elif [ -f "$defaultconfig" ];
  config="$defaultconfig"
else
  echo No config file
  exit 1
fi
services=($services)

cleanupscreenandmakenew() {
  screen -wipe
  screens=$(screen -list | grep $name)
  if [ ! -z "$screens" ]; then
    echo killing screen
    screen -S $name -X quit
  fi
  echo making new screen
  screen -d -S $name -m sh
}

getresultforservice() {
  until ping -q -w 1 -c 1 8.8.8.8 > /dev/null;
  do
    echo waiting...
    echo "" >/dev/null
  done
  if [ ! -p $pipe ]; then
    mkfifo $pipe
    chmod 0666 $pipe
  fi
  echo getting $name from $region using $profile
  cleanupscreenandmakenew
  screen -S $name -p 0 -X stuff "aws codepipeline get-pipeline-state --name $name --region $region --profile $profile --output json >$pipe ^M"
  sleep 3
  while read -t 3 line <$pipe
  do
    result="$result$line"
  done
  rm -f $pipe
  if [ -z "$result" ]; then
    if [ ! -p "$mfapipe" ]; then
      mkfifo "$mfapipe"
      chmod 0666 $mfapipe
    fi
    reg="[0-9]{6,6}"
    while [[ ! $mfa =~ ^${reg}$ ]]; do
      echo waiting for mfa...
      read mfa <$mfapipe
      echo "MFA $mfa received..."
    done
    rm $mfapipe
    screen -S $name -p 0 -X stuff "$mfa^M"
    sleep 3
  fi
}

sendnotification() {
  if [ "$prev" != "$final" ]; then
    if [ "$final" == \"Failed\" ]; then
      urgency=critical
    else
      urgency=low
    fi
    notify-send -u $urgency $name "$final\n https://console.aws.amazon.com/codesuite/codepipeline/pipelines/$name/view?region=$region"
  fi
}

parseresult() {
  final=`echo $result | jq ".stageStates[] | select(.stageName == \"$stage\") | .latestExecution.status"`
  if [ -f "$basepath/$name" ]; then
    prev=`cat $basepath/$name`
  fi
}

writeresulttofile() {
  if [ -z "$final" ]; then
    echo "Unknown" > $basepath/services/$name
  else
    echo $final > $basepath/services/$name
  fi

}
while true
do
  IFS=$'\n'; set -f
  if [ ! -f "$config" ]; then
    echo Missing Config $config
    exit 1
  fi
  for service in `cat $config | jq -cr '.services[] | "\(.name) \(.stage) \(.region) \(.profile)"'`
  do
    IFS=" ";
    result=""
    read -r name stage region profile <<< "$service"
    echo $name
    # we start a detached screen so we can inject an AWS MFA code
    pipe="$basepath/pipe-$name"
    while [ -z "$result" ]; do
      getresultforservice
    done
    screen -S $name -X quit
    parseresult
    sendnotification
    writeresulttofile
    aws-pipeline-tally
  done
done
